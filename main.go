package main

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/remoteview/service-blocks/common"
	_ "github.com/remoteview/service-blocks/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/remoteview/service-blocks/models"
	"github.com/remoteview/service-blocks/version"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// HealthCheck - status
type HealthCheck struct {
	Version string `json:"version"`
	Status  string `json:"status"`
}

// @title Blocks api
// @version 1.0
// @description Blocks api endpoint

// @contact.name Ivan Santos
// @contact.url https://ivansantos.me
// @contact.email pingme@ivansantos.me

// @host localhost:3000
// @BasePath /
func main() {
	db := common.Init()
	defer func() {
		err := db.Close()
		if err != nil {
			fmt.Println("Error closing server")
		}
	}()

	r := gin.New()

	r.GET("/_health", healthCheckHandler)
	r.GET("/blocks", listBlocksHandler)
	r.GET("/blocks/:id", getBlockHandler)
	r.POST("/blocks", createBlockHandler)
	r.DELETE("/blocks/:id", deleteBlockHandler)

	r.Use(cors.New(cors.Config{
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "OPTIONS"},
		AllowHeaders:     []string{"Origin"},
		AllowAllOrigins:  true,
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	fmt.Println("Running server!")
	err := r.Run(":3001")
	if err != nil {
		fmt.Println("Error starting server")
	}
}

// @Summary Health check
// @Description Health check
// @Accept  json
// @Produce  json
// @Router /_health [get]
func healthCheckHandler(c *gin.Context) {
	version := version.GetVersion()
	c.JSON(200, HealthCheck{Status: "Ok", Version: version})
}

// @Summary List blocks
// @Description List blocks
// @Accept  json
// @Produce  json
// @Router /blocks [get]
func listBlocksHandler(c *gin.Context) {
	db := common.GetDB()
	var data []models.Block
	err := db.All(&data)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":  "json decoding : " + err.Error(),
			"status": http.StatusBadRequest,
		})
		return
	}
	if len(data) > 0 {
		c.JSON(200, data)
	} else {
		c.JSON(200, make([]string, 0))
	}
}

// @Summary Get block
// @Description Get block
// @Accept  json
// @Produce  json
// @Router /blocks/{id} [get]
func getBlockHandler(c *gin.Context) {
	id := c.Params.ByName("id")
	var block models.Block
	if err := common.GetDB().Find(&block, id); err != nil {
		c.AbortWithStatus(404)
		fmt.Println(err)
	} else {
		c.JSON(200, block)
	}
}

// @Summary Create block
// @Description List blocks
// @Accept  json
// @Produce  json
// @Router /blocks [post]
func createBlockHandler(c *gin.Context) {
	c.Header("Content-Type", "application/json; charset=utf-8")

	var err error
	var block models.Block

	if err = c.BindJSON(&block); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":  "json decoding : " + err.Error(),
			"status": http.StatusBadRequest,
		})
		return
	}
	if err = common.GetDB().Create(&block); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":  "json decoding : " + err.Error(),
			"status": http.StatusBadRequest,
		})
		return
	}
	c.JSON(201, gin.H{"success": block})
}

// @Summary Delete block
// @Description Delete block
// @Accept  json
// @Produce  json
// @Router /blocks/{id} [delete]
func deleteBlockHandler(c *gin.Context) {
	id := c.Params.ByName("id")
	var block models.Block
	if err := common.GetDB().Find(&block, id); err != nil {
		c.AbortWithStatus(404)
		fmt.Println(err)
	} else {
		if err = common.GetDB().Destroy(&block); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"error":  "json decoding : " + err.Error(),
				"status": http.StatusBadRequest,
			})
			return
		}
	}
}
